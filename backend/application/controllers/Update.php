<?php

/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Update extends CI_Controller
{

    function __construct()
    {
        parent::__construct();

        // header('Access-Control-Allow-Origin: *');
        header('Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS');
        header('Access-Control-Allow-Headers: accept, Origin, Content-Type, X-Auth-Token , Authorization');

        error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING);
        date_default_timezone_set('Asia/Calcutta');
        //require(APPPATH . 'libraries///logger.php');
        $this->load->library(array('session'));
    }

    function json_data()
    {
        header('Content-type: application/json');
        $json_request_data = file_get_contents("php://input");
        //logger::d("json_request_data",$json_request_data);
        $request_data = json_decode($json_request_data, true);
        //logger::d("request_data",$request_data);
        return $request_data;
    }

    public function update_hotel_details()
    {
        $json_data = $this->json_data();

        $FUserId = $json_data['FUserId'];
        $FUserTypeId = $json_data['FUserTypeId'];
        $FHotelId = $json_data['FHotelId'];

        $hotel_data = $this->Fetch_Model->get_data_by_query("SELECT * FROM hotel WHERE IsDeleted = 1 AND id=" . $FHotelId . " ");

        $UpdateData['hotel_name'] = ($json_data['HotelName'] == '' || $json_data['HotelName'] == null) ? $hotel_data[0]['hotel_name'] : $json_data['HotelName'];
        $UpdateData['address'] = ($json_data['Address'] == '' || $json_data['Address'] == null) ? $hotel_data[0]['address'] : $json_data['Address'];
        $UpdateData['city'] = ($json_data['City'] == '' || $json_data['City'] == null) ? $hotel_data[0]['city'] : $json_data['City'];
        $UpdateData['district'] = ($json_data['District'] == '' || $json_data['District'] == null) ? $hotel_data[0]['district'] : $json_data['District'];
        $UpdateData['state'] = ($json_data['State'] == '' || $json_data['State'] == null) ? $hotel_data[0]['state'] : $json_data['State'];
        $UpdateData['pin'] = ($json_data['Pincode'] == '' || $json_data['Pincode'] == null) ? $hotel_data[0]['pin'] : $json_data['Pincode'];
        $UpdateData['min_rate'] = ($json_data['MinRate'] == '' || $json_data['MinRate'] == null) ? $hotel_data[0]['min_rate'] : $json_data['MinRate'];
        $UpdateData['discount'] = ($json_data['Discount'] == '' || $json_data['Discount'] == null) ? $hotel_data[0]['discount'] : $json_data['Discount'];
        $UpdateData['description'] = ($json_data['Description'] == '' || $json_data['Description'] == null) ? $hotel_data[0]['description'] : $json_data['Description'];
        $UpdateData['owner_name'] = ($json_data['OwnerName'] == '' || $json_data['OwnerName'] == null) ? $hotel_data[0]['owner_name'] : $json_data['OwnerName'];
        $UpdateData['mobile'] = ($json_data['Mobile'] == '' || $json_data['Mobile'] == null) ? $hotel_data[0]['mobile'] : $json_data['Mobile'];
        $UpdateData['email'] = ($json_data['Email'] == '' || $json_data['Email'] == null) ? $hotel_data[0]['email'] : $json_data['Email'];
        $UpdateData['IsDeleted'] = 1;
        $UpdateData['updatedAt'] = date("Y-m-d H:i:s");


        $Facilities = $json_data['Facilities'];

        $FacilitiesMaster = $this->db->where(array('IsDeleted' => 1, 'fhotel_id' => $FHotelId))->get('hotel_facilities_master')->result_array();

        $FacilitiesData['fhotel_id'] = $FHotelId;
        $FacilitiesData['createdAt'] = date("Y-m-d H:i:s");

        $TechArray = $_POST['FTechnicianId'];


        for ($i = 0; $i < count($FacilitiesMaster); $i++) {

            if (!in_array($FacilitiesMaster[$i]['fhotel_facilities_id'], $Facilities)) {
                $NotData['IsDeleted'] = 0;
                $this->db->where(array('IsDeleted' => 1, 'fhotel_id' => $FHotelId, 'fhotel_facilities_id' => $FacilitiesMaster[$i]['fhotel_facilities_id']))->update("hotel_facilities_master", $NotData);
            } else {
                if (($key = array_search($FacilitiesMaster[$i]['fhotel_facilities_id'], $Facilities)) !== false) {
                    unset($Facilities[$key]);
                }
            }
        }

        $Facilities = array_values($Facilities);
        for ($j = 0; $j < count($Facilities); $j++) {
            $FacilitiesData['fhotel_facilities_id'] = $Facilities[$j];
            $this->db->insert("hotel_facilities_master", $FacilitiesData);
        }

        $HotelPhotos = $json_data['HotelImageData'];
        if (!empty($HotelPhotos)) {
            $target_path = APPPATH . "Uploads/HotelPhoto/"; //Declaring Path for uploaded images

            if (!file_exists($target_path)) {
                mkdir($target_path, 0777, true);
            }
            $HotelType = array_column($HotelPhotos, "Type");
            if ($HotelType) {
                $UpdateActive['IsDeleted'] = 0;
                $UpdateActive['updatedAt'] = date("Y-m-d H:i:s");
                $this->db->where(array('Fhotel_id' => $FHotelId, 'deletedAt' => 1))->where_in('image_type', $HotelType)->update('hotel_images', $UpdateActive);
            }

            for ($k = 0; $k < count($HotelPhotos); $k++) {
                $validextensions = array("jpeg", "jpg", "png", "JPG", "pdf", "PDF"); //Extensions which are allowed
                $file_extension = $HotelPhotos[$k]['Extension']; //store extensions in the variable
                $file_name = $FUserId . '_' . md5(uniqid()) . '.' . $file_extension;

                $new_target_path = $target_path . $file_name;
                if (in_array($file_extension, $validextensions)) {

                    $img = (string)$HotelPhotos[$k]['URI'];
                    $img = str_replace('data:image/jpeg;base64,', '', $img);
                    $img = str_replace(' ', '+', $img);
                    $img_data = base64_decode($img);
                    $file = $new_target_path;
                    //$success = file_put_contents($file, $img_data);

                    if ($success = file_put_contents($file, $img_data)) { //if file moved to uploads folder
                        $HotelPhotoData['Fhotel_id'] = $FHotelId;
                        $HotelPhotoData['image_type'] = $HotelPhotos[$k]['Type'];
                        $HotelPhotoData['image'] = $file_name;
                        $HotelPhotoData['createsAt'] = date("Y-m-d H:i:s");

                        $this->db->insert('hotel_images', $HotelPhotoData);
                    }
                }
            }
        }

        $UpdatedData = $this->db->where(array('id' => $FHotelId))->update('hotel', $UpdateData);
        if ($UpdatedData) {
            $response["response"] = "success";
            $response["success_message"] = "Hotel Profile Updated Successfully";
        } else {
            $response["response"] = "error";
            $response["error_description"] = "database operation failed";
        }
        echo json_encode($response);
    }

    public function update_room_type()
    {
        $json_data = $this->json_data();

        $RoomTypeId = $json_data['RoomTypeId'];
        $data['fhotel_id'] = intval($json_data['Fhotel_id']);
        $data['room_type'] = $json_data['roomType'];
        $data['updatedAt'] = date("Y-m-d H:i:s");

        if ($this->db->where(array('id' => $RoomTypeId))->update('master_room_type', $data)) {
            $response["response"] = "success";
            $response["success_message"] = "Room Updated Successfully";
        } else {
            $response["response"] = "error";
            $response["error_description"] = "Database Operation Failed.";
        }
        echo json_encode($response);
    }

    public function update_room_package()
    {
        $json_data = $this->json_data();

        $RoomPackageId = $json_data['RoomPackageId'];
        $FhotelId = $json_data['Fhotel_id'];

        $data['package_type'] = $json_data['roomPackage'];
        $data['fmaster_room_type_id'] = $json_data['PackageRoomType'];
        $data['rate'] = $json_data['rate'];
        $data['extra_bed_rate'] = $json_data['extrabedrate'];
        $data['discount'] = $json_data['discount'];
        $data['updatedAt'] = date("Y-m-d H:i:s");

        // $MasterRoomType = $this->db->where(array('IsDeleted' => 1, 'fhotel_id' => $json_data['Fhotel_id'], 'package_type' => $json_data['roomPackage'], 'fmaster_room_type_id' => $json_data['PackageRoomType']))->get('master_package_type')->result_array();

        if ($this->db->where(array('id' => $RoomPackageId, 'fhotel_id' => $FhotelId,))->update('master_package_type', $data)) {
            $response["response"] = "success";
            $response["success_message"] = "Room Package Updated Successfully";
        } else {
            $response["response"] = "error";
            $response["error_description"] = "Database Operation Failed.";
        }
        echo json_encode($response);
    }

    public function update_room()
    {
        $json_data = $this->json_data();

        $RoomId = $json_data['RoomId'];
        $FUserId = $json_data['FUserId'];
        $FUserTypeId = $json_data['FUserTypeId'];
        $data['fhotel_id'] = $json_data['Fhotel_id'];
        $data['fmaster_room_type_id'] = $json_data['roomType'];
        $data['updatedAt'] = date("Y-m-d H:i:s");

        $data['fmaster_package_type_id'] = '';
        for ($j = 0; $j < count($json_data['packageType']); $j++) {
            if ($j == 0) {
                $data['fmaster_package_type_id'] .= $json_data['packageType'][$j];
            } else {
                $data['fmaster_package_type_id'] .= "," . $json_data['packageType'][$j];
            }
        }

        if ($this->db->where(array('id' => $RoomId, 'fhotel_id' => $json_data['Fhotel_id']))->update('rooms', $data)) {

            $RoomFacilities = $this->db->where(array('IsDeleted' => 1, 'fmaster_room_type_id' => $RoomId, 'fhotel_id' => $json_data['Fhotel_id']))->get('rooms_facilities_master')->result_array();

            $AddNewFacility['fhotel_id'] = $json_data['Fhotel_id'];
            $AddNewFacility['fmaster_room_type_id'] = $RoomId;
            $AddNewFacility['createdAt'] = date("Y-m-d H:i:s");

            $FacilitiesArray = $json_data['facilities'];


            for ($i = 0; $i < count($RoomFacilities); $i++) {

                if (!in_array($RoomFacilities[$i]['frooms_facilities_id'], $FacilitiesArray)) {
                    $NotData['IsDeleted'] = 0;
                    $NotData['updatedAt'] = date("Y-m-d H:i:s");
                    $this->db->where(array('IsDeleted' => 1, 'fmaster_room_type_id' => $RoomId, 'fhotel_id' => $json_data['Fhotel_id'], 'frooms_facilities_id' => $RoomFacilities[$i]['frooms_facilities_id']))->update("rooms_facilities_master", $NotData);
                } else {
                    if (($key = array_search($RoomFacilities[$i]['frooms_facilities_id'], $FacilitiesArray)) !== false) {
                        unset($FacilitiesArray[$key]);
                    }
                }
            }

            $FacilitiesArray = array_values($FacilitiesArray);
            for ($j = 0; $j < count($FacilitiesArray); $j++) {
                $AddNewFacility['frooms_facilities_id'] = $FacilitiesArray[$j];
                $this->db->insert("rooms_facilities_master", $AddNewFacility);
            }

            $response["response"] = "success";
            $response["success_message"] = "Room Updated Successfully";
        } else {
            $response["response"] = "error";
            $response["error_description"] = "Database Operation Failed.";
        }
        echo json_encode($response);
    }

    public function checkout_room()
    {
        $json_data = $this->json_data();

        //! there can be multiple rooms api is not complete

        $FRoomId = $json_data['FRoomId'];
        $data['availablity'] = 1;
        $data['updatedAt'] = date("Y-m-d H:i:s");

        if ($this->db->where(array('id' => $FRoomId))->update('rooms', $data)) {
            $response["response"] = "success";
            $response["success_message"] = "CheckOut Successfully";
        } else {
            $response["response"] = "error";
            $response["error_description"] = "Database Operation Failed.";
        }
        echo json_encode($response);
    }
}
