<?php

/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Trash extends CI_Controller
{
    function __construct()
    {
        parent::__construct();

        // header('Access-Control-Allow-Origin: *');
        header('Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS');
        header('Access-Control-Allow-Headers: accept, Origin, Content-Type, X-Auth-Token , Authorization');

        error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING);
        date_default_timezone_set('Asia/Calcutta');
        //require(APPPATH . 'libraries///logger.php');
        $this->load->library(array('session'));

    }

    function json_data()
    {
        header('Content-type: application/json');
        $json_request_data = file_get_contents("php://input");
        //logger::d("json_request_data",$json_request_data);
        $request_data = json_decode($json_request_data, true);
        //logger::d("request_data",$request_data);
        return $request_data;
    }

    public function delete_room_type()
    {
        $FRoomTypeId = $_GET['FRoomTypeId'];
        $Update_data['IsDeleted'] = 0;
        $Update_data['updatedAt'] = date("Y-m-d H:i:s");

        if ($this->db->where(array('id' => $FRoomTypeId))->update('master_room_type', $Update_data)) {
            $response["response"] = "success";
            $response["success_message"] = "Deleted successfully";
        } else {
            $response["response"] = "error";
            $response["error_description"] = "Entry does not exists in db or database operation failed";
        }

        echo json_encode($response);
    }

    public function delete_room_package()
    {
        $FRoomPackageId = $_GET['FRoomTypeId'];
        $Update_data['IsDeleted'] = 0;
        $Update_data['updatedAt'] = date("Y-m-d H:i:s");

        if ($this->db->where(array('id' => $FRoomPackageId))->update('master_package_type', $Update_data)) {
            $response["response"] = "success";
            $response["success_message"] = "Deleted successfully";
        } else {
            $response["response"] = "error";
            $response["error_description"] = "Entry does not exists in db or database operation failed";
        }

        echo json_encode($response);
    }

    public function delete_room()
    {
        $FRoomId = $_GET['FRoomId'];
        $FHotelId = $_GET['FHotelId'];

        $Update_data['IsDeleted'] = 0;
        $Update_data['updatedAt'] = date("Y-m-d H:i:s");

        if ($this->db->where(array('id' => $FRoomId,'fhotel_id' => $FHotelId))->update('rooms', $Update_data)) {
            
            $Update_facilities['IsDeleted'] = 0;
            $Update_facilities['updatedAt'] = date("Y-m-d H:i:s");

            $this->db->where(array('fmaster_room_type_id' => $FRoomId,'fhotel_id' => $FHotelId))->update('rooms_facilities_master', $Update_facilities);

            $response["response"] = "success";
            $response["success_message"] = "Deleted successfully";
        } else {
            $response["response"] = "error";
            $response["error_description"] = "Entry does not exists in db or database operation failed";
        }

        echo json_encode($response);
    }


    


}
